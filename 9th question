#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Function to create a new node
struct TreeNode* createNode(int val) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->val = val;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform in-order traversal and find the Kth smallest element
void inorderTraversal(struct TreeNode* root, int k, int* count, int* result) {
    if (root == NULL)
        return;
    
    inorderTraversal(root->left, k, count, result);
    (*count)++;
    
    if (*count == k) {
        *result = root->val;
        return;
    }
    
    inorderTraversal(root->right, k, count, result);
}

// Function to find the Kth smallest element in a BST
int kthSmallest(struct TreeNode* root, int k) {
    int count = 0;
    int result = -1;
    inorderTraversal(root, k, &count, &result);
    return result;
}

int main() {
    // Create the binary search tree
    struct TreeNode* root = createNode(3);
    root->left = createNode(1);
    root->right = createNode(4);
    root->left->right = createNode(2);
    
    int k = 2;
    int kthSmallestElement = kthSmallest(root, k);
    printf("The %dth smallest element in the BST is: %d\n", k, kthSmallestElement);
    
    // Free the memory allocated for the binary tree nodes
    // Note: Memory deallocation is not implemented in this example for brevity.
    
    return 0;
}
