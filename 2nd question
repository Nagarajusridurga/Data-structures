#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Queue structure for BFS
typedef struct {
    int items[MAX_VERTICES];
    int front;
    int rear;
} Queue;

// Function to create a new queue
Queue* createQueue() {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->front = -1;
    queue->rear = -1;
    return queue;
}

// Function to check if the queue is empty
int isEmpty(Queue* queue) {
    return queue->rear == -1;
}

// Function to add an item to the queue
void enqueue(Queue* queue, int value) {
    if (queue->rear == MAX_VERTICES - 1)
        printf("Queue is full\n");
    else {
        if (queue->front == -1)
            queue->front = 0;
        queue->rear++;
        queue->items[queue->rear] = value;
    }
}

// Function to remove an item from the queue
int dequeue(Queue* queue) {
    int item;
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        item = -1;
    } else {
        item = queue->items[queue->front];
        queue->front++;
        if (queue->front > queue->rear) {
            queue->front = queue->rear = -1;
        }
    }
    return item;
}

// Function to perform BFS and find the minimum number of edges between two vertices
int minEdges(int graph[MAX_VERTICES][MAX_VERTICES], int vertices, int start, int end) {
    int visited[MAX_VERTICES] = {0};
    Queue* queue = createQueue();
    enqueue(queue, start);
    visited[start] = 1;
    int distance = 0;
    
    while (!isEmpty(queue)) {
        int size = queue->rear - queue->front + 1;
        distance++;
        while (size > 0) {
            int current = dequeue(queue);
            for (int i = 1; i <= vertices; i++) {
                if (graph[current][i] && !visited[i]) {
                    if (i == end) {
                        return distance;
                    }
                    enqueue(queue, i);
                    visited[i] = 1;
                }
            }
            size--;
        }
    }
    return -1; // No path found
}

int main() {
    int vertices, edges;
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &vertices, &edges);
    
    int graph[MAX_VERTICES][MAX_VERTICES] = {{0}};
    printf("Enter the edges (u v):\n");
    for (int i = 0; i < edges; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        graph[u][v] = graph[v][u] = 1; // Undirected graph
    }
    
    int start, end;
    printf("Enter the vertices to find the minimum number of edges between (u v): ");
    scanf("%d %d", &start, &end);
    
    int minEdge = minEdges(graph, vertices, start, end);
    if (minEdge != -1)
        printf("Minimum number of edges between %d and %d: %d\n", start, end, minEdge);
    else
        printf("No path exists between %d and %d\n", start, end);
    
    return 0;
}
