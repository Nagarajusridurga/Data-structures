#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Function to create a new binary tree node
struct TreeNode* newNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to search for an element's index in inorder array
int search(int arr[], int start, int end, int val) {
    for (int i = start; i <= end; i++) {
        if (arr[i] == val)
            return i;
    }
    return -1; // Not found
}

// Function to construct the binary tree from preorder and inorder traversals
struct TreeNode* buildTree(int preorder[], int inorder[], int inStart, int inEnd, int* preIndex) {
    if (inStart > inEnd)
        return NULL;
    
    // Pick current node from preorder traversal using preIndex and increment preIndex
    struct TreeNode* node = newNode(preorder[*preIndex]);
    (*preIndex)++;
    
    // If this node has no children, return it
    if (inStart == inEnd)
        return node;

    // Find the index of this node in inorder traversal
    int inIndex = search(inorder, inStart, inEnd, node->val);

    // Construct left and right subtrees recursively
    node->left = buildTree(preorder, inorder, inStart, inIndex - 1, preIndex);
    node->right = buildTree(preorder, inorder, inIndex + 1, inEnd, preIndex);

    return node;
}

// Function to print inorder traversal of the binary tree
void inorderTraversal(struct TreeNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->val);
        inorderTraversal(root->right);
    }
}

int main() {
    int preorder[] = {3, 9, 20, 15, 7};
    int inorder[] = {9, 3, 15, 20, 7};
    int preIndex = 0;
    int len = sizeof(preorder) / sizeof(preorder[0]);

    struct TreeNode* root = buildTree(preorder, inorder, 0, len - 1, &preIndex);

    printf("Inorder Traversal of Constructed Tree: ");
    inorderTraversal(root);
    printf("\n");

    return 0;
}
